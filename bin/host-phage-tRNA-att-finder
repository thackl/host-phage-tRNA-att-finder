#!/usr/bin/env perl
# Created: 24 May 2019
# Author: Thomas Hackl, thackl@lim4.de
use warnings;
no warnings "qw";
use strict;
use Getopt::Long  qw(:config no_ignore_case bundling);
use Data::Dumper;
use FindBin qw($RealBin);
use List::Util qw(min max);

GetOptions (
    "out-dir|o=s" => \(my $out = "host-phage-tRNA-att-finder-out"),
    "trna|r!" => \(my $host_is_trna),
    "threads|t=i" => \(my $threads = 4),
    "help|h!" => \(my $help),
    "debug|D!" => \(my $debug),
) or die("Error in command line arguments\n");

if ($help || @ARGV != 2){
    print "Link phages and potential host by finding shared integration attachment sites\n";
    print "Usage: host-phage-tRNA-att-finder [options] host-contigs.fna phage-contigs.fna\n";
    printf " %-19s  %s\n", "-r/--trna", "treat host file as extracted tRNAs, skip prediction";
    printf " %-19s  %s\n", "-t/--threads", "number of threads to use in external commands";
    printf " %-19s  %s\n", "-o/--out", "write to this dir/prefix";
    printf " %-19s  %s\n", "-h/--help", "show this help";
    printf " %-19s  %s\n", "-D/--debug", "show debug messages";

    exit 0;
}

my $host_fna = $ARGV[0];
my $phage_fna = $ARGV[1];
my ($host_trna_ffn, $host_trna_fna, $host_trna_bed);
    
# setup out dir
$out||=".";
unless (-d $out) { mkdir $out or die $!; }


if ($host_is_trna) {
    $host_trna_ffn = $host_fna;
} else {
    print STDERR "\nPredicting host tRNAs and tmRNAs\n";
    ($host_trna_bed, $host_trna_ffn) = predict_host_trnas($host_fna, "$out/host-tRNA"); 
}

print STDERR "\nScanning phages for (partial) tRNAs\n";
my $phage_trna_hits = scan_phages($phage_fna, $host_trna_ffn, "$out/phage-tRNA");

print STDERR "\nGather top hits by phage:\n";
my $phage_trna_hits_sorted = "$out/phage-tRNA-blast-by-phage.tsv";
run(qq(grep -v '^#' "$phage_trna_hits" | sort -k2,2 -k12,12gr > "$phage_trna_hits_sorted"));

print "$phage_trna_hits_sorted\n";

#------------------------------------------------------------------------------#
sub scan_phages{
    my ($phage_fna, $host_trna_ffn, $pre) = @_;

    run(qq(makeblastdb -dbtype nucl -in "$phage_fna"), 1);
    my $trna_blast_tsv = "$pre-blastn.tsv";

    run(qq(blastn -num_threads $threads -task blastn -db "$phage_fna" \\
      -query $host_trna_ffn -reward 1 -penalty -1 -gapopen 2 -gapextend 1 \\
      -perc_identity 80 -evalue 10e-2 -outfmt 7 > "$trna_blast_tsv"), 1);

    return $trna_blast_tsv;
}


sub run{
    my($cmd, $print) = @_;
    print "+ $cmd\n" if $print;
    my $log = qx($cmd);
    die $log, "\nDo'h, something went wrong" if $?;
    return $log;
}

sub get_seq_lengths{
    my ($file) = @_;
    open(FAI, "-|", "samtools faidx $file; cat $file.fai") or die $!;
    my %S;
    while (<FAI>) {
        my ($id,$len, $foo) = split("\t", $_, 3);
        $S{$id} = $len;
    }
    return \%S;
}

# use aragorn, parser from Torsten Seemanns PROKKA
sub predict_host_trnas{
    my ($host_fna, $pre) = @_;
    my $host_trna_bed = "$pre.bed";
    my $host_trna_ffn = "$pre.ffn";
    my $seq_len = get_seq_lengths($host_fna);

    my $ver = qx(aragorn -h | perl -ne 'print \$1 if m{ARAGORN v([0-9\.]+)}');
    die $ver if $?;
    chomp($ver);

    open(TRNABED, ">", $host_trna_bed) or die $!;

    # -l : Assume that each sequence has a linear topology. Search does not wrap
    # -w : batch mode
    my $cmd = "aragorn -l -gcstd -w $host_fna"; # -t/-m
    print STDERR "+ $cmd\n";
    my $num_trna=0;
    open TRNA, '-|', $cmd;
    my $sid;
    while (<TRNA>) {
        chomp;
        if (m/^>(\S+)/) {
            $sid = $1;
            next;
        }
        my @x = split m/\s+/;
        next unless @x == 5 and $x[0] =~ m/^\d+$/;
        if ($x[1] =~ m/\?/) {
            msg("tRNA $x[2] is a pseudo/wacky gene - skipping.\n");
            next;
        }
        #msg("@x");
        # in linear mode (-l) we can get -ve coordinates
        $x[2] =~ m/(c)?\[-?(\d+),(\d+)\]/;
        my($revcom, $start, $end) = ($1,$2,$3);

        # bug fix for aragorn when revcom trna ends at start of contig!
        #  if (defined $revcom and $start > $end) {
        #    msg("Activating kludge for Aragorn bug for tRNA end at contig start");
        #    $start = 1;
        #  }
        if ($start > $end) {
            msg("tRNA $x[2] has start($start) > end ($end) - skipping.");
            next;
        }

        # correct strange coordinates in -l mode
        $start = max( $start, 1 );
        $end = min( $end, $seq_len->{$sid} );

        if (abs($end-$start) > 500) {
            msg("tRNA/tmRNA $x[2] is too big (>500bp) - skipping.");
            next;
        }
        # end kludge
        $num_trna++;

        my $ftype = 'tRNA';
        my $product = $x[1].$x[4];
        my @gene = ();
        if ($x[1] =~ m/^(tmRNA)/) {
            $ftype = $1;
            $product = "transfer-messenger RNA, SsrA";
            @gene = ('gene' => 'ssrA')
        }

        print TRNABED join("\t", $sid, $start-1, $end-1, $product, ".", $revcom ? "-" : "+", "Aragorn:$ver", $ftype), "\n";
    }
    print STDERR "Found $num_trna tRNAs\n";
    close TRNA;
    close TRNABED;

    # extract tRNA seqs and fix IDs
    run(qq(seqkit subseq --bed "$host_trna_bed" "$host_fna" -o "$host_trna_ffn"),1);

    rename $host_trna_ffn, "$host_trna_ffn.bak";
    open TRNAFFN, "<$host_trna_ffn.bak";
    open TRNAFFN_NEW, ">$host_trna_ffn";
    while (<TRNAFFN>) {
      if ($_ =~ /^>([^ ]+)_[^ ]+ (.+)/) {
        print TRNAFFN_NEW ">$1__$2\n";
      } else {
        print TRNAFFN_NEW $_;
      }
    }
    close TRNAFFN;
    close TRNAFFN_NEW;

    return($host_trna_bed, $host_trna_ffn);
}

sub msg{
    my ($msg) = @_;
    print STDERR $msg."\n";
}
